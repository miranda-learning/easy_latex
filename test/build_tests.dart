import 'dart:io';

import 'package:process_run/process_run.dart';

import 'test_scenarios.dart';


void main() async => TestBuilder().build();

class TestBuilder {

  static const double fontSize = 32;

  Future<void> build() async {
    // load test scenarios
    Map<String, dynamic> testScenarios = easyLatexTestScenarios;

    // build render tests
    await _buildRenderTests(testScenarios['renderTests']);

    // add copy of easyLatexTestScenarios to website
    Directory websiteDir = Directory('website/lib/');
    if (websiteDir.existsSync()) File('test/test_scenarios.dart').copy('website/lib/test_scenarios.dart');
  }

  Future<void> _buildRenderTests(Map<String, dynamic> tests) async {
    String str = "import 'package:easy_latex/easy_latex.dart';\n"
      "import 'package:flutter/material.dart';\n"
      "import 'package:flutter_test/flutter_test.dart';\n"
      "\n"
      "// **************************************************************************\n"
      "// This file is auto-generated by build_tests.dart and should not be modified.\n"
      "// Any changes to this file may be overwritten by subsequent auto-generation.\n"
      "// **************************************************************************\n"
      "void main() {\n";

    for (var k1 in tests.keys) {
      for (var k2 in tests[k1]!.keys) {

        String key = '${k1}_$k2'
          .replaceAll(r'\', '')
          .replaceAll(r'{', '')
          .replaceAll(r'}', '')
          .replaceAll(r',', '')
          .replaceAll(r' ', '_');

        if (tests[k1]![k2] is String) {
          str += """  testWidgets('Render test $key', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"${tests[k1]![k2]}", fontSize: $fontSize, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_$key.png'));
  });

""";
        } else {
          str += """  testWidgets('Render test $key', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'${tests[k1]![k2]['text']}',
          fontSize: ${tests[k1]![k2]['fontSize'] ?? fontSize},
          wrapMode: ${tests[k1]![k2]['wrapMode'] == null ? "LatexWrapMode.none" : "LatexWrapMode.${tests[k1]![k2]['wrapMode']}"},
          textAlign: ${tests[k1]![k2]['textAlign'] == null ? null : "MultiLineTextAlign.${tests[k1]![k2]['textAlign']}"},
          parsing: ${tests[k1]![k2]['parsing'] == null ? "ParsingMode.minorErrorsAsRedPlaceholders" : "ParsingMode.${tests[k1]![k2]['parsing']}"},
          allPointsAsDecimalPoints: ${tests[k1]![k2]['allPointsAsDecimalPoints'] ?? false},
          locale: '${tests[k1]![k2]['locale']}',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_$key.png'));
  });

""";
        }

      }
    }

    str += "\n}";
    File('test/render_test.dart').writeAsStringSync(str);

    Directory screenshotsDir = Directory('test/screenshots/');
    if (screenshotsDir.existsSync()) screenshotsDir.deleteSync(recursive: true);
    screenshotsDir.createSync();
    await Shell().run("flutter test --update-goldens");
  }

}