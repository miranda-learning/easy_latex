import 'package:easy_latex/easy_latex.dart';
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

// **************************************************************************
// This file is auto-generated by build_tests.dart and should not be modified.
// Any changes to this file may be overwritten by subsequent auto-generation.
// **************************************************************************
void main() {
  testWidgets('Render test locale_decimal_en', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'.3 \ 3. \ 2.3',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'en',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_locale_decimal_en.png'));
  });

  testWidgets('Render test locale_decimal_de', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'.3 \ 3. \ 2.3',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'de',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_locale_decimal_de.png'));
  });

  testWidgets('Render test locale_comma_en', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'2\comma 3',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'en',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_locale_comma_en.png'));
  });

  testWidgets('Render test locale_comma_de', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'2\comma 33',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'de',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_locale_comma_de.png'));
  });

  testWidgets('Render test locale_allPoints_en', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'...',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: true,
          locale: 'en',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_locale_allPoints_en.png'));
  });

  testWidgets('Render test locale_allPoints_de', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'...',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: true,
          locale: 'de',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_locale_allPoints_de.png'));
  });

  testWidgets('Render test fontSize_fontSize_28', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 28.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_28.png'));
  });

  testWidgets('Render test fontSize_fontSize_26', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 26.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_26.png'));
  });

  testWidgets('Render test fontSize_fontSize_24', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 24.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_24.png'));
  });

  testWidgets('Render test fontSize_fontSize_22', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 22.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_22.png'));
  });

  testWidgets('Render test fontSize_fontSize_20', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 20.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_20.png'));
  });

  testWidgets('Render test fontSize_fontSize_18', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 18.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_18.png'));
  });

  testWidgets('Render test fontSize_fontSize_16', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 16.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_16.png'));
  });

  testWidgets('Render test fontSize_fontSize_14', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 14.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_14.png'));
  });

  testWidgets('Render test fontSize_fontSize_12', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 12.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_12.png'));
  });

  testWidgets('Render test fontSize_fontSize_10', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'a1b2c3d4e5f6g7h8i9j0',
          fontSize: 10.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fontSize_fontSize_10.png'));
  });

  testWidgets('Render test singleChar_singleChar_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a{b}c[d]e(f)g", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_singleChar_singleChar_1.png'));
  });

  testWidgets('Render test singleChar_singleChar_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"1+2-3*4/5=6?7!8", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_singleChar_singleChar_2.png'));
  });

  testWidgets('Render test singleChar_singleChar_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r": ><~|`,;&°", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_singleChar_singleChar_3.png'));
  });

  testWidgets('Render test subSuper_sub_super_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"1^2 a^2 b^2 A^2 x_2 x^2_2 x_1 x^{\frac{1}{1}} x_2^{\frac{1}{1}} x^{\sqrt[4]{1}} x_2^{\frac{1}{1}}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_subSuper_sub_super_1.png'));
  });

  testWidgets('Render test subSuper_sub_super_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"^14_{~\;6}C - ^235_{~\;92}U = ^14C", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_subSuper_sub_super_2.png'));
  });

  testWidgets('Render test subSuper_sub_super_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\int_x^2 \int^x_2 \int_x \int^2 \int_x^M 1_x^2 x_x^2 M_x^2 x dx", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_subSuper_sub_super_3.png'));
  });

  testWidgets('Render test newlines_newline_with__1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\frac{4}{3} \\ + 3 \\ + 3 + 4\\3", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_newline_with__1.png'));
  });

  testWidgets('Render test newlines_newline_with__2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\left( \frac{4}{3} \\ + 3 \\ + 3 + 4\\3 \right) \frac{4\\3}{3}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_newline_with__2.png'));
  });

  testWidgets('Render test newlines_wrapMode_simple_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'1000 + 2000 + 3000 + 4000 + 5000 \Rightarrow 6000 + 7000 + 8000 \Rightarrow 6000 + 7000 + 8000',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.simple,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_wrapMode_simple_1.png'));
  });

  testWidgets('Render test newlines_wrapMode_simple_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'(1000 + 2000 + 3000 + 4000) + (5000 + 6000 + 7000 + 8000 + 6000 + 7000 + 8000)',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.simple,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_wrapMode_simple_2.png'));
  });

  testWidgets('Render test newlines_wrapMode_smart_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'1000 + 2000 + 3000 + 4000 + 5000 \Rightarrow 6000 + 7000 + 8000 \Rightarrow 6000 + 7000 + 8000',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.smart,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_wrapMode_smart_1.png'));
  });

  testWidgets('Render test newlines_wrapMode_smart_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'1000 + 2000 + 3000 + 4000 + 5000 = 6000 + 7000 + 8000',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.smart,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_wrapMode_smart_2.png'));
  });

  testWidgets('Render test newlines_wrapMode_smart_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'1000 + 2000 + 3000 + 4000 + 5000 + 6000 + 7000 + 8000',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.smart,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_wrapMode_smart_3.png'));
  });

  testWidgets('Render test newlines_wrapMode_smart_4', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'(1000 + 2000 + 3000 + 4000 + 5000) (6000 + 7000 + 8000)',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.smart,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_wrapMode_smart_4.png'));
  });

  testWidgets('Render test newlines_align_right_with_', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'1000 + 2000 + 3000 + 4000 \\ + 5000 + \\ 6000 + 7000 + 8000',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.none,
          textAlign: MultiLineTextAlign.right,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_align_right_with_.png'));
  });

  testWidgets('Render test newlines_align_left_simple', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'1000 + 2000 + 3000 + 4000 + 5000 + 6000 + 7000 + 8000',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.simple,
          textAlign: MultiLineTextAlign.left,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_align_left_simple.png'));
  });

  testWidgets('Render test newlines_align_center_simple', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'1000 + 2000 + 3000 + 4000 + 5000 + 6000 + 7000 + 8000',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.simple,
          textAlign: MultiLineTextAlign.center,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_align_center_simple.png'));
  });

  testWidgets('Render test newlines_align_right_simple', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'1000 + 2000 + 3000 + 4000 + 5000 + 6000 + 7000 + 8000',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.simple,
          textAlign: MultiLineTextAlign.right,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_newlines_align_right_simple.png'));
  });

  testWidgets('Render test custom_comma', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"2 \comma 2", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_custom_comma.png'));
  });

  testWidgets('Render test custom_listcomma', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"2 \listcomma 2", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_custom_listcomma.png'));
  });

  testWidgets('Render test custom_minus', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\minus2 -2", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_custom_minus.png'));
  });

  testWidgets('Render test custom_placeholder', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\placeholder \dashplaceholder \redplaceholder", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_custom_placeholder.png'));
  });

  testWidgets('Render test custom_matrix', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\matrix{ 1 & 2 \\ 3 & 4}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_custom_matrix.png'));
  });

  testWidgets('Render test custom_pmatrix', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\pmatrix{ 1 & 2 \\ 3 & 4}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_custom_pmatrix.png'));
  });

  testWidgets('Render test custom_bmatrix1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bmatrix{ 1 & 2 \\ 3 & 4}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_custom_bmatrix1.png'));
  });

  testWidgets('Render test custom_Bmatrix2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\Bmatrix{ 1 & 2 \\ 3 & 4}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_custom_Bmatrix2.png'));
  });

  testWidgets('Render test brackets_brackets_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"(\frac{1}{2}) \left( \frac{1}{2} \right) \left{ \frac{1}{2} \right} \{ \frac{1}{2} \}[ \frac{1}{2} ] \left[ \frac{1}{2} \right] \[ \frac{1}{2} \]", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_brackets_1.png'));
  });

  testWidgets('Render test brackets_brackets_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\llbracket 5 \rrbracket \llbracket \frac{1}{2} \rrbracket", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_brackets_2.png'));
  });

  testWidgets('Render test brackets_brackets_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\lparen 5 \rparen \[5\] \lbrack 5 \rbrack \{5\} \lbrace 5 \rbrace \lgroup 5 \rgroup", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_brackets_3.png'));
  });

  testWidgets('Render test brackets_brackets_4', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"[a; b)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_brackets_4.png'));
  });

  testWidgets('Render test brackets_cases', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"x = \cases{3 \ \text{für} \ 0 < x < 1 \\ 3 \\ 3 \\ 3}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_cases.png'));
  });

  testWidgets('Render test brackets_norm_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"|1| \big| \Big| \bigg| \Bigg|", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_norm_1.png'));
  });

  testWidgets('Render test brackets_norm_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"|1| \big| \frac{1}{1} \big|", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_norm_2.png'));
  });

  testWidgets('Render test brackets_norm_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"|1| \Big| \frac{1}{1} \Big|", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_norm_3.png'));
  });

  testWidgets('Render test brackets_norm_4', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"|1| \bigg| \frac{1}{1} \bigg|", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_norm_4.png'));
  });

  testWidgets('Render test brackets_norm_5', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"|1| \Bigg| \frac{1}{1} \Bigg|", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_norm_5.png'));
  });

  testWidgets('Render test brackets_norm_6', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"|_a^b \big|_a^b \Big|_a^b \bigg|_a^b \Bigg|_a^b", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_brackets_norm_6.png'));
  });

  testWidgets('Render test decoration_bar', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bar{5}, \bar{55}, \bar{555}, \bar{55555}, \bar{a} \bar{ä} \bar{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_bar.png'));
  });

  testWidgets('Render test decoration_dot', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\dot{5}, \dot{55}, \dot{555}, \dot{55555}, \dot{a} \dot{ä} \dot{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_dot.png'));
  });

  testWidgets('Render test decoration_ddot', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\ddot{5}, \ddot{55}, \ddot{555}, \ddot{55555}, \ddot{a} \ddot{ä} \ddot{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_ddot.png'));
  });

  testWidgets('Render test decoration_dddot', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\dddot{5}, \dddot{55}, \dddot{555}, \dddot{55555}, \dddot{a} \dddot{ä} \dddot{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_dddot.png'));
  });

  testWidgets('Render test decoration_hat', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\hat{5}, \hat{55}, \hat{555}, \hat{55555}, \hat{a} \hat{ä} \hat{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_hat.png'));
  });

  testWidgets('Render test decoration_overbrace', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\overbrace{5}, \overbrace{55}, \overbrace{555}, \overbrace{55555}, \overbrace{a} \overbrace{ä} \overbrace{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_overbrace.png'));
  });

  testWidgets('Render test decoration_overline', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\overline{5}, \overline{55}, \overline{555}, \overline{55555}, \overline{a} \overline{ä} \overline{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_overline.png'));
  });

  testWidgets('Render test decoration_overleftarrow', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\overleftarrow{5}, \overleftarrow{55}, \overleftarrow{555}, \overleftarrow{55555}, \overleftarrow{a} \overleftarrow{ä} \overleftarrow{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_overleftarrow.png'));
  });

  testWidgets('Render test decoration_overleftrightarrow', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\overleftrightarrow{5}, \overleftrightarrow{55}, \overleftrightarrow{555}, \overleftrightarrow{55555}, \overleftrightarrow{a} \overleftrightarrow{ä} \overleftrightarrow{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_overleftrightarrow.png'));
  });

  testWidgets('Render test decoration_overrightarrow', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\overrightarrow{5}, \overrightarrow{55}, \overrightarrow{555}, \overrightarrow{55555}, \overrightarrow{a} \overrightarrow{ä} \overrightarrow{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_overrightarrow.png'));
  });

  testWidgets('Render test decoration_tilde', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\tilde{5}, \tilde{55}, \tilde{555}, \tilde{55555}, \tilde{a} \tilde{ä} \tilde{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_tilde.png'));
  });

  testWidgets('Render test decoration_vec', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\vec{5}, \vec{55}, \vec{555}, \vec{55555}, \vec{a} \vec{ä} \vec{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_vec.png'));
  });

  testWidgets('Render test decoration_widehat', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\widehat{5}, \widehat{55}, \widehat{555}, \widehat{55555}, \widehat{aa} \widehat{ä} \widehat{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_widehat.png'));
  });

  testWidgets('Render test decoration_widetilde', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\widetilde{5}, \widetilde{55}, \widetilde{555}, \widetilde{55555}, \widetilde{a} \widetilde{ä} \widetilde{f}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_widetilde.png'));
  });

  testWidgets('Render test decoration_underbrace', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\underbrace{5}, \underbrace{55}, \underbrace{555}, \underbrace{55555}, \underbrace{aaa} \underbrace{fff} \underbrace{\text{fff}} \underbrace{ggg}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_underbrace.png'));
  });

  testWidgets('Render test decoration_underline', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\underline{5}, \underline{55}, \underline{555}, \underline{55555}, \underline{a} \underline{ä} \underline{fff} \underline{\text{fff}} \underline{ggg}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_underline.png'));
  });

  testWidgets('Render test decoration_color', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\color{98CC70} \pi \sqrt{\color{red} 2} \pi \color{blue} \pi \color{apricot} 123.5 \color{mulberry} 123.5", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_decoration_color.png'));
  });

  testWidgets('Render test fonts_italic_upper', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"ABCDEFGHIJKLMNOPQRSTUVWXYZ", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_italic_upper.png'));
  });

  testWidgets('Render test fonts_italic_lower', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"abcdefghijklmnopqrstuvwxyzäöü", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_italic_lower.png'));
  });

  testWidgets('Render test fonts_regular_upper', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\text{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_regular_upper.png'));
  });

  testWidgets('Render test fonts_regular_lower', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\text{abcdefghijklmnopqrstuvwxyzäöü}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_regular_lower.png'));
  });

  testWidgets('Render test fonts_regular_digits', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"0123456789", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_regular_digits.png'));
  });

  testWidgets('Render test fonts_bold_upper', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bm{ABCDEFGHIJKLMNOPQRSTUVWXYZÄÖÜ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_bold_upper.png'));
  });

  testWidgets('Render test fonts_bold_lower', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bm{abcdefghijklmnopqrstuvwxyzäöü}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_bold_lower.png'));
  });

  testWidgets('Render test fonts_bold_digits', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bm{0123456789}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_bold_digits.png'));
  });

  testWidgets('Render test fonts_mathbb_upper', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathbb_upper.png'));
  });

  testWidgets('Render test fonts_mathbb_lower', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathbb{k}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathbb_lower.png'));
  });

  testWidgets('Render test fonts_mathcal_upper', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathcal{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathcal_upper.png'));
  });

  testWidgets('Render test fonts_mathfrak_upper', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathfrak_upper.png'));
  });

  testWidgets('Render test fonts_mathfrak_lower', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathfrak{abcdefghijklmnopqrstuvwxyz}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathfrak_lower.png'));
  });

  testWidgets('Render test fonts_mathfrak_digits', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathfrak{0123456789}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathfrak_digits.png'));
  });

  testWidgets('Render test fonts_mathscr_upper', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathscr_upper.png'));
  });

  testWidgets('Render test fonts_mathtt_upper', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathtt{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathtt_upper.png'));
  });

  testWidgets('Render test fonts_mathtt_lower', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathtt{abcdefghijklmnopqrstuvwxyz}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathtt_lower.png'));
  });

  testWidgets('Render test fonts_mathtt_digits', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathtt{0123456789}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathtt_digits.png'));
  });

  testWidgets('Render test fonts_text', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\text{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_text.png'));
  });

  testWidgets('Render test fonts_textrm', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\textrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_textrm.png'));
  });

  testWidgets('Render test fonts_mathrm', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathrm.png'));
  });

  testWidgets('Render test fonts_operatorname', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\operatorname{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_operatorname.png'));
  });

  testWidgets('Render test fonts_mathbf', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_mathbf.png'));
  });

  testWidgets('Render test fonts_boldsymbol', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\boldsymbol{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_boldsymbol.png'));
  });

  testWidgets('Render test fonts_bm', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bm{ABCDEFGHIJKLMNOPQRSTUVWXYZ}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_fonts_bm.png'));
  });

  testWidgets('Render test limProdSum_big', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bigcap_n^a \bigcup_n^a \bigodot_n^a \bigoplus_n^a \bigotimes_n^a \bigsqcup_n^a \biguplus_n^a \bigvee_n^a \bigwedge_n^a", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_limProdSum_big.png'));
  });

  testWidgets('Render test limProdSum_coprod', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \coprod b \coprod{i = 1} c \coprod^{n} d \coprod{i = 1}^{n} e \coprod^{n}_{i = 1} f", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_limProdSum_coprod.png'));
  });

  testWidgets('Render test limProdSum_lim', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \lim b \lim_{a \to \infty} c \lim^{a \to \infty} d \lim_{a \to \infty}^{a \to \infty} e \lim^{a \to \infty}_{a \to \infty} f", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_limProdSum_lim.png'));
  });

  testWidgets('Render test limProdSum_prod', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \prod b \prod_{i = 1} c \prod^{n} d \prod_{i = 1}^{n} e \prod^{n}_{i = 1} f", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_limProdSum_prod.png'));
  });

  testWidgets('Render test limProdSum_sum', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \sum b \sum_{i = 1} c \sum^{n} d \sum_{i = 1}^{n} e \sum^{n}_{i = 1} f", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_limProdSum_sum.png'));
  });

  testWidgets('Render test integral_int', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\int_1^2 \iint_1^2 \iiint_1^2 \iiiint_1^2 \intop_1^2", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_integral_int.png'));
  });

  testWidgets('Render test integral_oint', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\oint_1^2 \oiint_1^2 \oiiint_1^2 \oiiiint_1^2", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_integral_oint.png'));
  });

  testWidgets('Render test integral_smallint', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\smallint_1^2 \intinline_1^2", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_integral_smallint.png'));
  });

  testWidgets('Render test matrix_matrix_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\matrix{3} \pmatrix{3} \bmatrix{3} \Bmatrix{3} \matrix{3 \\ 3 } \pmatrix{3 \\ 3 } \bmatrix{3 \\ 3 } \Bmatrix{3 \\ 3 }", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_matrix_matrix_1.png'));
  });

  testWidgets('Render test matrix_matrix_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\matrix{3 \\ 3 \\ 3} \pmatrix{3 \\ 3 \\ 3} \bmatrix{3 \\ 3 \\ 3} \Bmatrix{3 \\ 3 \\ 3} \pmatrix{3 \\ 3 \\ 3 \\ 3} \bmatrix{3 \\ 3 \\ 3 \\ 3} \Bmatrix{3 \\ 3 \\ 3 \\ 3}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_matrix_matrix_2.png'));
  });

  testWidgets('Render test matrix_matrix_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\matrix{3 & 313 \\ 313 & 3} \pmatrix{3 & 313 \\ 313 & 3} \bmatrix{3 & 313 \\ 3 & 3} \Bmatrix{3 & 313 \\ 313 & 3}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_matrix_matrix_3.png'));
  });

  testWidgets('Render test matrix_matrix_vs_begin', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\matrix{3 & 3 \\ 3 & 3} \begin{matrix}3 & 3 \\ 3 & 3\end{matrix} \pmatrix{3 & 3 \\ 3 & 3} \begin{pmatrix}3 & 3 \\ 3 & 3\end{pmatrix} \bmatrix{3 & 3 \\ 3 & 3} \begin{bmatrix}3 & 3 \\ 3 & 3\end{bmatrix} \Bmatrix{3 & 3 \\ 3 & 3} \begin{Bmatrix}3 & 3 \\ 3 & 3\end{Bmatrix}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_matrix_matrix_vs_begin.png'));
  });

  testWidgets('Render test matrix_empty_entries', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\pmatrix{3 & 3 \\ 3 & 3} \pmatrix{3 & 3 \\  & 3} \pmatrix{ & 3 \\  & 3} \pmatrix{ 3 &  \\  & } \pmatrix{  &  \\  & } \pmatrix{ 3 \\ } \pmatrix{ 3 } \pmatrix{ }", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_matrix_empty_entries.png'));
  });

  testWidgets('Render test binomFracSqrt_sqrt_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"xA \sqrt{2} \sqrt{a} \sqrt{ä} \sqrt{b} \sqrt{g} \sqrt{A} \sqrt{B}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_binomFracSqrt_sqrt_1.png'));
  });

  testWidgets('Render test binomFracSqrt_sqrt_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\sqrt{\bar{x}} \sqrt{\bar{2}} \sqrt{\bar{A}} \sqrt{\bar{Wx}} \sqrt{\frac{x}{x}} \sqrt{\frac{2}{2}} \minus \sqrt{\minus\frac{2}{2}}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_binomFracSqrt_sqrt_2.png'));
  });

  testWidgets('Render test binomFracSqrt_sqrt_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\sqrt[4]{2} \sqrt[404]{2} \sqrt[40404]{2}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_binomFracSqrt_sqrt_3.png'));
  });

  testWidgets('Render test binomFracSqrt_frac_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a\frac{2}{2}b\frac{\frac{2}{2}}{2}c\frac{\frac{\frac{2}{2}}{2}}{2} d \frac{2}{2}b\frac{2}{\frac{2}{2}} e \frac{2}{\frac{\frac{2}{2}}{2}}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_binomFracSqrt_frac_1.png'));
  });

  testWidgets('Render test binomFracSqrt_frac_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\sqrt{2} \sqrt{\frac{2}{2}} \sqrt{\frac{\frac{2}{2}}{2}} \sqrt{\frac{2}{\frac{\frac{2}{2}}{2}}}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_binomFracSqrt_frac_3.png'));
  });

  testWidgets('Render test binomFracSqrt_frac_4', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a\frac{ag}{ag} b \frac{A\sqrt{2}g}{A\sqrt{2}g} c", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_binomFracSqrt_frac_4.png'));
  });

  testWidgets('Render test binomFracSqrt_binom', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \binom{ag}{ag} b", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_binomFracSqrt_binom.png'));
  });

  testWidgets('Render test symbols_symbols_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"+-*/=?!:><|`", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_symbols_symbols_1.png'));
  });

  testWidgets('Render test symbols_symbols_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\# \& \And \$ \% \permil \_ \| \colon", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_symbols_symbols_2.png'));
  });

  testWidgets('Render test symbols_symbols_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\div \pm \mp \times \And", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_symbols_symbols_3.png'));
  });

  testWidgets('Render test symbols_primes_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"V' V'' V''' V'''''''' f' f'' f''' Y' W' T'", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_symbols_primes_1.png'));
  });

  testWidgets('Render test spaces_spaces_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"-\,-\ \backslash ,", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_spaces_spaces_1.png'));
  });

  testWidgets('Render test spaces_spaces_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"-\;-\ \backslash ;", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_spaces_spaces_2.png'));
  });

  testWidgets('Render test spaces_spaces_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"-~-\ \sim", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_spaces_spaces_3.png'));
  });

  testWidgets('Render test spaces_spaces_4', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"-\ -\ \backslash(space)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_spaces_spaces_4.png'));
  });

  testWidgets('Render test spaces_spaces_5', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"-\nobreakspace-\ \backslash nobreakspace", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_spaces_spaces_5.png'));
  });

  testWidgets('Render test spaces_spaces_6', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"-\quad-\ \backslash quad", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_spaces_spaces_6.png'));
  });

  testWidgets('Render test spaces_spaces_7', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"-\qquad-\ \backslash qquad", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_spaces_spaces_7.png'));
  });

  testWidgets('Render test greek_greek_upper', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\Alpha \Beta \Gamma \Delta \Epsilon \Zeta \Eta \Theta \Iota \Kappa \Lambda \Mu \Nu \Xi \Omicron \Pi \Rho \Sigma \Tau \Upsilon \Phi \Chi \Psi \Omega", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_greek_greek_upper.png'));
  });

  testWidgets('Render test greek_greek_lower', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\alpha \beta \gamma \delta \epsilon \zeta \eta \theta \iota \kappa \lambda \mu \nu \xi \omicron \pi \rho \sigma \tau \upsilon \phi \chi \psi \omega", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_greek_greek_lower.png'));
  });

  testWidgets('Render test greek_greek_var', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\varepsilon \vartheta \varkappa \varpi \varrho \varsigma \varphi", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_greek_greek_var.png'));
  });

  testWidgets('Render test functions_min_max_sup_inf', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\min(4, 5) \  \max(4, 5) \  \sup \  \inf", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_min_max_sup_inf.png'));
  });

  testWidgets('Render test functions_limsup_liminf', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\limsup(x) \  \liminf(x)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_limsup_liminf.png'));
  });

  testWidgets('Render test functions_exp_log_ln_lg', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\exp(x) \  \log(x) \  \ln(x) \  \lg(x)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_exp_log_ln_lg.png'));
  });

  testWidgets('Render test functions_sin_cos_tan', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\sin(x) \  \cos(x) \  \tan(x)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_sin_cos_tan.png'));
  });

  testWidgets('Render test functions_sec_csc_cot', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\sec(x) \  \csc(x) \  \cot(x)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_sec_csc_cot.png'));
  });

  testWidgets('Render test functions_arcsin_arccos_arctan', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\arcsin(x) \  \arccos(x) \  \arctan(x)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_arcsin_arccos_arctan.png'));
  });

  testWidgets('Render test functions_arcsec_arccsc_arccot', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\arcsec(x) \  \arccsc(x) \  \arccot(x)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_arcsec_arccsc_arccot.png'));
  });

  testWidgets('Render test functions_sinh_cosh_tanh_coth', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\sinh(x) \  \cosh(x) \  \tanh(x) \  \coth(x)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_sinh_cosh_tanh_coth.png'));
  });

  testWidgets('Render test functions_nCr_mod', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\nCr(x) \  \mod(x)", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_nCr_mod.png'));
  });

  testWidgets('Render test functions_arg_sgn_deg_dim', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\arg \  \sgn \  \deg \  \dim", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_arg_sgn_deg_dim.png'));
  });

  testWidgets('Render test functions_hom_ker_gcd_det_Pr', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\hom \  \ker \  \gcd \  \dim \  \Pr", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_functions_hom_ker_gcd_det_Pr.png'));
  });

  testWidgets('Render test latexCommands_cmd_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\AA \mathrm{\AA}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_1.png'));
  });

  testWidgets('Render test latexCommands_cmd_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\dots - \vdots - \varvdots - \cdot - \cdotp - \cdots \cdots", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_2.png'));
  });

  testWidgets('Render test latexCommands_cmd_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\dots - \cdots - \dotsb - \dotsc - \dotsm - \dotsi-  \dotso", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_3.png'));
  });

  testWidgets('Render test latexCommands_cmd_4', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\centerdot - \ldots - \ldotp - \ddots", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_4.png'));
  });

  testWidgets('Render test latexCommands_cmd_5', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mathellipsis - \bullet - \therefore - \because", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_5.png'));
  });

  testWidgets('Render test latexCommands_cmd_6', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a = b \coloneqq c \ne c \neq d \equiv e \doteq f", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_6.png'));
  });

  testWidgets('Render test latexCommands_cmd_7', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \approx b \thickapprox c \approxeq c\cong d", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_7.png'));
  });

  testWidgets('Render test latexCommands_cmd_8', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \sim b \thicksim c \simeq d", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_8.png'));
  });

  testWidgets('Render test latexCommands_cmd_9', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \propto b \varpropto c", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_9.png'));
  });

  testWidgets('Render test latexCommands_cmd_10', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \lt b \le c \leq d \ll e", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_10.png'));
  });

  testWidgets('Render test latexCommands_cmd_11', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \gt b \ge c \geq d \gg e", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_11.png'));
  });

  testWidgets('Render test latexCommands_cmd_12', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \nless b \nleqslant c \nleqq d \lneq e \lneqq f", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_12.png'));
  });

  testWidgets('Render test latexCommands_cmd_13', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \ngtr b \ngeqslant c \ngeqq d \gneq e \gneqq f", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_13.png'));
  });

  testWidgets('Render test latexCommands_cmd_14', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \preceq b \prec c \succeq d \succ e", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_14.png'));
  });

  testWidgets('Render test latexCommands_cmd_15', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \leqq b \leqslant c \eqslantless d \lesssim e \lessapprox f \lessdot g", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_15.png'));
  });

  testWidgets('Render test latexCommands_cmd_16', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \geqq b \geqslant c \eqslantgtr d \gtrsim e \gtrapprox f \gtrdot g", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_16.png'));
  });

  testWidgets('Render test latexCommands_cmd_17', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \lessgtr b \lesseqgtr c \lesseqqgtr d \gtrless e \gtreqless f \gtreqqless g", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_17.png'));
  });

  testWidgets('Render test latexCommands_cmd_18', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \ngeq b \nleq c", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_18.png'));
  });

  testWidgets('Render test latexCommands_cmd_19', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \lll b \llless c \gggtr d \ggg e", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_19.png'));
  });

  testWidgets('Render test latexCommands_cmd_20', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \preccurlyeq b \curlyeqprec c \precsim d \precapprox e", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_20.png'));
  });

  testWidgets('Render test latexCommands_cmd_21', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \succcurlyeq b \curlyeqsucc c \succsim d \succapprox e", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_21.png'));
  });

  testWidgets('Render test latexCommands_cmd_22', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \lvertneqq b \lnsim c \lnapprox d \nprec e \npreceq f \precnsim g \precnapprox h", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_22.png'));
  });

  testWidgets('Render test latexCommands_cmd_23', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \gvertneqq b \gnsim c \gnapprox d \nsucc e \nsucceq f \succnsim g \succnapprox h", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_23.png'));
  });

  testWidgets('Render test latexCommands_cmd_24', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \precneqq b \succneqq c", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_24.png'));
  });

  testWidgets('Render test latexCommands_cmd_25', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \nsim b \nshortmid c \ncong d \backsim e \backsimeq f \eqsim g", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_25.png'));
  });

  testWidgets('Render test latexCommands_cmd_26', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \eqcirc b \circeq c \triangleq d \doteqdot e \risingdotseq f \fallingdotseq g \Doteq i", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_26.png'));
  });

  testWidgets('Render test latexCommands_cmd_27', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \lhd b \vartriangleleft c \rhd d \vartriangleright e \trianglelefteq f \trianglerighteq g", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_27.png'));
  });

  testWidgets('Render test latexCommands_cmd_28', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"a \unlhd b \unrhd c \ntriangleleft d \ntrianglelefteq e \ntriangleright f \ntrianglerighteq g", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_28.png'));
  });

  testWidgets('Render test latexCommands_cmd_29', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"A \subset B \nsubset C \Subset D \subseteq E \subsetneq F \varsubsetneq G", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_29.png'));
  });

  testWidgets('Render test latexCommands_cmd_30', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"A \nsubseteq B \subseteqq C \subsetneqq D \varsubsetneqq E \nsubseteqq E", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_30.png'));
  });

  testWidgets('Render test latexCommands_cmd_31', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"A \supset B \Supset C \supseteq D \supsetneq E \varsupsetneq F \nsupseteq G", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_31.png'));
  });

  testWidgets('Render test latexCommands_cmd_32', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"A \supseteqq B \supsetneqq C \varsupsetneqq D \nsupseteqq E", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_32.png'));
  });

  testWidgets('Render test latexCommands_cmd_33', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"A \sqsubset B \sqsupset C \sqsubseteq D \sqsupseteq E", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_33.png'));
  });

  testWidgets('Render test latexCommands_cmd_34', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"A \ni B \owns C \forall D \exists E \in F \notin G", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_34.png'));
  });

  testWidgets('Render test latexCommands_cmd_35', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\nexists \backepsilon", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_35.png'));
  });

  testWidgets('Render test latexCommands_cmd_36', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\leftarrow \longleftarrow \Leftarrow \Longleftarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_36.png'));
  });

  testWidgets('Render test latexCommands_cmd_37', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\rightarrow \longrightarrow \Rightarrow \Longrightarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_37.png'));
  });

  testWidgets('Render test latexCommands_cmd_38', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\leftrightarrow \longleftrightarrow \Leftrightarrow \Longleftrightarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_38.png'));
  });

  testWidgets('Render test latexCommands_cmd_39', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\to \gets \mapsto \longmapsto", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_39.png'));
  });

  testWidgets('Render test latexCommands_cmd_40', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\nearrow \searrow \swarrow \nwarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_40.png'));
  });

  testWidgets('Render test latexCommands_cmd_41', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\hookleftarrow \hookrightarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_41.png'));
  });

  testWidgets('Render test latexCommands_cmd_42', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\leftharpoonup \rightharpoonup \leftharpoondown \rightharpoondown \rightleftharpoons", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_42.png'));
  });

  testWidgets('Render test latexCommands_cmd_43', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\uparrow \Uparrow \downarrow \Downarrow \updownarrow \Updownarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_43.png'));
  });

  testWidgets('Render test latexCommands_cmd_44', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\dashrightarrow \dashleftarrow \leftleftarrows \leftrightarrows \Lleftarrow \Rrightarrow \twoheadleftarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_44.png'));
  });

  testWidgets('Render test latexCommands_cmd_45', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\nleftarrow \nrightarrow \nLeftarrow \nRightarrow \nleftrightarrow \nLeftrightarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_45.png'));
  });

  testWidgets('Render test latexCommands_cmd_46', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\leftarrowtail \looparrowleft \leftrightharpoons", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_46.png'));
  });

  testWidgets('Render test latexCommands_cmd_47', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\curvearrowleft \circlearrowleft \Lsh", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_47.png'));
  });

  testWidgets('Render test latexCommands_cmd_48', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\upuparrows \upharpoonleft \downharpoonleft \multimap", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_48.png'));
  });

  testWidgets('Render test latexCommands_cmd_49', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\leftrightsquigarrow \rightrightarrows \rightleftarrows", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_49.png'));
  });

  testWidgets('Render test latexCommands_cmd_50', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\twoheadrightarrow \rightarrowtail \looparrowright \curvearrowright \circlearrowright", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_50.png'));
  });

  testWidgets('Render test latexCommands_cmd_51', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\Rsh \downdownarrows \upharpoonright \downharpoonright \rightsquigarrow \leadsto \restriction", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_51.png'));
  });

  testWidgets('Render test latexCommands_cmd_52', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\aleph \wp \Re \Im", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_52.png'));
  });

  testWidgets('Render test latexCommands_cmd_53', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\clubsuit \diamondsuit \heartsuit \spadesuit \diamond \star", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_53.png'));
  });

  testWidgets('Render test latexCommands_cmd_54', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\natural \sharp \hbar \hslash", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_54.png'));
  });

  testWidgets('Render test latexCommands_cmd_55', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\nabla \partial \flat\ell", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_55.png'));
  });

  testWidgets('Render test latexCommands_cmd_56', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\dag \dagger \ddag \ddagger", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_56.png'));
  });

  testWidgets('Render test latexCommands_cmd_57', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\rmoustache \lmoustache \wr \amalg", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_57.png'));
  });

  testWidgets('Render test latexCommands_cmd_58', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\imath \jmath \maltese", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_58.png'));
  });

  testWidgets('Render test latexCommands_cmd_59', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\pounds \mathsterling \yen \euro", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_59.png'));
  });

  testWidgets('Render test latexCommands_cmd_60', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\S \P", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_60.png'));
  });

  testWidgets('Render test latexCommands_cmd_61', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\perp \vdash \nvdash \dashv \top \bot \vDash \models \nvDash", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_61.png'));
  });

  testWidgets('Render test latexCommands_cmd_62', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\Vdash \nVdash \Vvdash \nVDash", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_62.png'));
  });

  testWidgets('Render test latexCommands_cmd_63', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\uplus \sqcap \ast \sqcup", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_63.png'));
  });

  testWidgets('Render test latexCommands_cmd_64', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mid \nmid \parallel \nparallel \nshortparallel", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_64.png'));
  });

  testWidgets('Render test latexCommands_cmd_65', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\lvert \lVert \rvert \rVert \vert \Vert", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_65.png'));
  });

  testWidgets('Render test latexCommands_cmd_66', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\shortmid \shortparallel \lfloor \rfloor \lceil \rceil", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_66.png'));
  });

  testWidgets('Render test latexCommands_cmd_67', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\ulcorner \urcorner \llcorner \lrcorner", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_67.png'));
  });

  testWidgets('Render test latexCommands_cmd_68', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\asymp \bowtie \Join \smile \frown \smallsmile \smallfrown", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_68.png'));
  });

  testWidgets('Render test latexCommands_cmd_69', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\circ \bigcirc \angle \triangle \vartriangle", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_69.png'));
  });

  testWidgets('Render test latexCommands_cmd_70', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\triangledown \triangleleft \triangleright \bigtriangleup \bigtriangledown", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_70.png'));
  });

  testWidgets('Render test latexCommands_cmd_71', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\blacktriangle \blacktriangledown \blacktriangleleft \blacktriangleright \blacksquare \lozenge \blacklozenge", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_71.png'));
  });

  testWidgets('Render test latexCommands_cmd_72', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bigstar \square \Box \Diamond", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_72.png'));
  });

  testWidgets('Render test latexCommands_cmd_73', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\infty \prime \backprime \acute \grave \breve \check \degree \mathring", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_73.png'));
  });

  testWidgets('Render test latexCommands_cmd_74', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\neg \lnot \empty \emptyset \varnothing", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_74.png'));
  });

  testWidgets('Render test latexCommands_cmd_75', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\cap \cup \Cap \Cup \doublecap \doublecup", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_75.png'));
  });

  testWidgets('Render test latexCommands_cmd_76', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\setminus \smallsetminus \backslash \not \land \lor", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_76.png'));
  });

  testWidgets('Render test latexCommands_cmd_77', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\wedge \vee \surd \langle \rangle \varangle", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_77.png'));
  });

  testWidgets('Render test latexCommands_cmd_78', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\oplus \ominus \odot \otimes \oslash", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_78.png'));
  });

  testWidgets('Render test latexCommands_cmd_79', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\circleddash \circledast \circledcirc \boxminus \boxplus \boxdot \boxtimes", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_79.png'));
  });

  testWidgets('Render test latexCommands_cmd_80', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\circledS \circledR \measuredangle \sphericalangle", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_80.png'));
  });

  testWidgets('Render test latexCommands_cmd_81', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mho \Finv \Game \complement \eth \diagup \diagdown", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_81.png'));
  });

  testWidgets('Render test latexCommands_cmd_82', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\checkmark \beth \daleth \gimel \digamma", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_82.png'));
  });

  testWidgets('Render test latexCommands_cmd_83', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bumpeq \Bumpeq \between \pitchfork", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_83.png'));
  });

  testWidgets('Render test latexCommands_cmd_84', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\dotplus \divideontimes \ltimes \rtimes \leftthreetimes \rightthreetimes", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_84.png'));
  });

  testWidgets('Render test latexCommands_cmd_85', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\barwedge \veebar \doublebarwedge \curlywedge \curlyvee \intercal", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_85.png'));
  });

  testWidgets('Render test latexCommands_cmd_86', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\N \Z \Q \R \C \H", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_latexCommands_cmd_86.png'));
  });

  testWidgets('Render test errors_error_invalidSyntax', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'\e + 2',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsInvalidSyntax,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_errors_error_invalidSyntax.png'));
  });

  testWidgets('Render test errors_error_redPlaceholders', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500),
        child: Latex(
          r'\e + 2',
          fontSize: 32.0,
          wrapMode: LatexWrapMode.none,
          textAlign: null,
          parsing: ParsingMode.minorErrorsAsRedPlaceholders,
          allPointsAsDecimalPoints: false,
          locale: 'null',
        ),
      ),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_errors_error_redPlaceholders.png'));
  });

  testWidgets('Render test mathpix_mathpix_1', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\# \$ \% \& \AA", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_1.png'));
  });

  testWidgets('Render test mathpix_mathpix_2', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\Delta \Gamma \Im \Lambda \Leftarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_2.png'));
  });

  testWidgets('Render test mathpix_mathpix_3', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\Leftrightarrow \Longleftarrow \Longleftrightarrow \Longrightarrow \Omega", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_3.png'));
  });

  testWidgets('Render test mathpix_mathpix_4', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\perp \Phi \Pi \Psi \Re", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_4.png'));
  });

  testWidgets('Render test mathpix_mathpix_5', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\Rightarrow \S \Sigma \Theta \Upsilon", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_5.png'));
  });

  testWidgets('Render test mathpix_mathpix_6', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\varangle \Vdash \Xi \\ \aleph", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_6.png'));
  });

  testWidgets('Render test mathpix_mathpix_7', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\alpha \angle \approx \asymp", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_7.png'));
  });

  testWidgets('Render test mathpix_mathpix_8', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\backslash \because \beta \beth", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_8.png'));
  });

  testWidgets('Render test mathpix_mathpix_9', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bigcap \bigcirc \bigcup \bigodot \bigoplus", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_9.png'));
  });

  testWidgets('Render test mathpix_mathpix_10', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bigotimes \biguplus \bigvee \bigwedge", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_10.png'));
  });

  testWidgets('Render test mathpix_mathpix_11', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\bot \bowtie \breve \bullet \cap", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_11.png'));
  });

  testWidgets('Render test mathpix_mathpix_12', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\cdot \cdots \check \chi \circ", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_12.png'));
  });

  testWidgets('Render test mathpix_mathpix_13', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\circlearrowleft \circlearrowright \circledast", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_13.png'));
  });

  testWidgets('Render test mathpix_mathpix_14', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\complement", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_14.png'));
  });

  testWidgets('Render test mathpix_mathpix_15', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\cong \coprod \cup \curlyvee \curlywedge", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_15.png'));
  });

  testWidgets('Render test mathpix_mathpix_16', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\curvearrowleft \curvearrowright \dagger \dashv", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_16.png'));
  });

  testWidgets('Render test mathpix_mathpix_17', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\ddot \ddots \delta \diamond \div", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_17.png'));
  });

  testWidgets('Render test mathpix_mathpix_18', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\dot \doteq \dots \downarrow \ell", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_18.png'));
  });

  testWidgets('Render test mathpix_mathpix_19', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\emptyset", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_19.png'));
  });

  testWidgets('Render test mathpix_mathpix_20', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\epsilon \equiv \eta", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_20.png'));
  });

  testWidgets('Render test mathpix_mathpix_21', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\exists \fallingdotseq \forall", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_21.png'));
  });

  testWidgets('Render test mathpix_mathpix_22', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\frown", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_22.png'));
  });

  testWidgets('Render test mathpix_mathpix_23', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\gamma \geq \geqq \geqslant \gg", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_23.png'));
  });

  testWidgets('Render test mathpix_mathpix_24', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\ggg \gtrless \gtrsim \hat \hbar", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_24.png'));
  });

  testWidgets('Render test mathpix_mathpix_25', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\hookleftarrow \hookrightarrow \imath \in", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_25.png'));
  });

  testWidgets('Render test mathpix_mathpix_26', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\infty \int \iota \jmath \kappa", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_26.png'));
  });

  testWidgets('Render test mathpix_mathpix_27', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\lambda \langle \lceil \ldots \leadsto", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_27.png'));
  });

  testWidgets('Render test mathpix_mathpix_28', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\leftarrow \leftleftarrows \leftrightarrow \leftrightarrows \leftrightharpoons", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_28.png'));
  });

  testWidgets('Render test mathpix_mathpix_29', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\leq \leqq \leqslant \lessdot \lessgtr", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_29.png'));
  });

  testWidgets('Render test mathpix_mathpix_30', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\lesssim \lfloor \ll \llcorner", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_30.png'));
  });

  testWidgets('Render test mathpix_mathpix_31', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\lll \longleftarrow \longleftrightarrow \longmapsto", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_31.png'));
  });

  testWidgets('Render test mathpix_mathpix_32', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\longrightarrow \lrcorner \ltimes \mapsto", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_32.png'));
  });

  testWidgets('Render test mathpix_mathpix_33', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\mho \models \mp \mu ", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_33.png'));
  });

  testWidgets('Render test mathpix_mathpix_34', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\multimap \nVdash \nabla \nearrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_34.png'));
  });

  testWidgets('Render test mathpix_mathpix_35', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\neg \neq \nexists \ni", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_35.png'));
  });

  testWidgets('Render test mathpix_mathpix_36', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\nmid \not \notin \nprec \npreceq", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_36.png'));
  });

  testWidgets('Render test mathpix_mathpix_37', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\nsim \nsubseteq \nsucc \nsucceq \nsupseteq", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_37.png'));
  });

  testWidgets('Render test mathpix_mathpix_38', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\nu \nvdash \nwarrow \odot ", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_38.png'));
  });

  testWidgets('Render test mathpix_mathpix_39', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\oint \omega \ominus", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_39.png'));
  });

  testWidgets('Render test mathpix_mathpix_40', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\oplus \oslash \otimes", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_40.png'));
  });

  testWidgets('Render test mathpix_mathpix_41', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\parallel \partial \perp", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_41.png'));
  });

  testWidgets('Render test mathpix_mathpix_42', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\phi \pi \pitchfork \pm \prec", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_42.png'));
  });

  testWidgets('Render test mathpix_mathpix_43', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\preccurlyeq \preceq \precsim \prime \prod", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_43.png'));
  });

  testWidgets('Render test mathpix_mathpix_44', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\propto \psi \qquad \quad \rangle", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_44.png'));
  });

  testWidgets('Render test mathpix_mathpix_45', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\rceil \rfloor \rho \rightarrow \rightleftarrows", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_45.png'));
  });

  testWidgets('Render test mathpix_mathpix_46', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\rightleftharpoons \rightrightarrows \rightsquigarrow \risingdotseq", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_46.png'));
  });

  testWidgets('Render test mathpix_mathpix_47', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\rtimes \searrow \sigma \sim \simeq", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_47.png'));
  });

  testWidgets('Render test mathpix_mathpix_48', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\smile \sqcap \sqcup \sqrt \sqsubset", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_48.png'));
  });

  testWidgets('Render test mathpix_mathpix_49', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\sqsubseteq \sqsupset \sqsupseteq \square", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_49.png'));
  });

  testWidgets('Render test mathpix_mathpix_50', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\star \subset \subseteq \subsetneq \succ", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_50.png'));
  });

  testWidgets('Render test mathpix_mathpix_51', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\succcurlyeq \succeq \succsim \sum \supset", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_51.png'));
  });

  testWidgets('Render test mathpix_mathpix_52', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\supseteq \supseteqq \supsetneq \supsetneqq \swarrow", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_52.png'));
  });

  testWidgets('Render test mathpix_mathpix_53', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\tau \therefore \theta", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_53.png'));
  });

  testWidgets('Render test mathpix_mathpix_54', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\times \top \triangle \triangleleft \triangleq", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_54.png'));
  });

  testWidgets('Render test mathpix_mathpix_55', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\triangleright \unlhd", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_55.png'));
  });

  testWidgets('Render test mathpix_mathpix_56', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\unrhd \uparrow \uplus \vDash \varepsilon", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_56.png'));
  });

  testWidgets('Render test mathpix_mathpix_57', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\varnothing \varphi \varpi", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_57.png'));
  });

  testWidgets('Render test mathpix_mathpix_58', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\varrho \varsigma \varsubsetneqq \vartheta \vdash", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_58.png'));
  });

  testWidgets('Render test mathpix_mathpix_59', (WidgetTester tester) async {
    tester.view.devicePixelRatio = 1.0;
    tester.view.physicalSize = Size(1400, 600);
    await tester.pumpWidget(Align(
      alignment: Alignment.topCenter,
      child: Latex(r"\vdots \vee \wedge \wp \xi \zeta \{ \| \}", fontSize: 32.0, backgroundColor: Colors.white),
    ));
    await expectLater(find.byType(Latex), matchesGoldenFile('screenshots/test_mathpix_mathpix_59.png'));
  });


}